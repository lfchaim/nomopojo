{"name":"Nomopojo","tagline":"Generic Java CRUD servlet to provide MongoDB REST services that does NOT use POJOs","body":"# nomopojo\r\nnomopojo is a set of generic Java CRUD servlets to provide REST services that does NOT use POJOs.\r\n\r\n#### WARNING: \r\n\r\n * STAND BACK!  This is very early pre-pre-alpha software! (at least until I remove this warning!)\r\n\r\n#### The name\r\nnomopojo stands for \"No More POJOs\".  In the Java/J2EE world, there are ton of ways\r\nto set up REST services as Servlets, but almost all of them require you to declare your\r\nobject layers as Plain Old Java Objects (also known as DTOs, VO, Beans, what have you).\r\n\r\n#### Background on POJOs\r\nThe POJO-everywhere mentality made a certain amount of sense back in the RDBMS days when database\r\nschemas were changed only with new releases of software.  The ease at which POJOs can be generated from\r\nJDBC drivers is well-established, and a whole sub-speciality of mappers has arisen: JPA, Hibernate,\r\nSpring Framework, JAXB, Jackson, Jersey, etc.  Part of the accepted paradigm is that these POJO channge\r\nwhen the database changes, and this all works well enough within one organizaations' applications.\r\n\r\n#### JSON is the new way to go.\r\nNow, flexible JSON payloads dominate both client-to-server and even server-to-server interactions\r\nacross organizational/corporate boundaries.  The schema-less property of JSON objects lets any\r\nparty add data elements easily, without having to coordinate these changes with other parties as\r\ntightly as with other formats.   It is important that when your company's business partners add\r\nnew data attributes that your company can at least NOT LOSE THEM, but this is precisely what\r\nhappens when the majority of J2EE-based REST frameworks try to map an incoming JSON object to a POJO.\r\nUnmapped attributes simply get DROPPED.  Put another way, the compile-time definition of a POJO\r\nclass becomes a destructive filter on all of your incoming JSON payloads.  And of course, modifying\r\nyour POJOs requires code modifications, repackaging, retesting, and re-releasing.  \r\n\r\n#### JSON is the anti-POJO\r\nIn environments where JSON is both on the client and the database, it makes ZERO sense to put POJOs in the middle.\r\nThe POJO pattern effectively throws every EVERY benefit using flexible JSON formats in the first place.\r\n\r\n#### Why I am developing nomopojo\r\nI spent some time looking for a generic REST servlet for MongoDB that doesn't involve POJOs and is\r\nimplemented as a normal Java Servlet.  The closest thing I found was RestHeart [1].  I was able to immediately use it in developing my Angular JS frontend, writing to a MongoDB database via RestHeart.  Unfortunately, I am required \r\nto deploy my work to Weblogic 12c (not my preference), which is a Serlet 3.0 container. RestHeart \r\nis written directly to the Undertow.io server [2], not the Servlet specification.  So, as great as \r\nUndertow.io is, I cannot use it for my day job.\r\n\r\n#### Conclusion\r\nThis is my attempt to fill this gap: providing a generic REST servlet for MongoDB via the Servlet 3.0 API.\r\n\r\nImplementing REST on top of JSON is trivial to do in most programming languges, like Javascript/Node/Express, \r\nor Python/Flask/Django, and has been implemented dozens of times.  But Java, even after 20+ years, still \r\nlacks the concept of a first-class Java Object literal.   Once you realize that, it is easy to see why so \r\nmany Java frameworks continue to exhibit the POJO-fetishes.  It then follows that na√Æve developers who lack \r\nexperience outside of Java simply cannot conceive of any other way to do it.  \r\n\r\n#### Roadmap\r\nIt turns out I implemented a generic read-only REST servlet in Java a few years ago, but using JDBC as an \r\ninput source.  I hope to add that servlet to nomopojo as well, once my current workload settles down \r\n(maybe early 2016).  I am open to expanding nomopojo to other NoSQL-type of backend databases.\r\n\r\n[1] https://github.com/SoftInstigate/restheart\r\n\r\n[2] http://undertow.io\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}